---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Import Tool - Molten" description="Import your glass inventory into Molten">
  <!-- Hero Section -->
  <section class="gradient-orange text-white py-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1 class="text-5xl md:text-6xl font-bold mb-6">
        Inventory Import Tool
      </h1>
      <p class="text-xl text-white/90">
        Build your inventory list here, then import it into Molten
      </p>
    </div>
  </section>

  <!-- Main Content -->
  <section class="py-12 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

      <!-- Instructions -->
      <details class="bg-white rounded-lg shadow-sm p-6 mb-8" open>
        <summary class="text-2xl font-bold mb-6 cursor-pointer hover:text-orange-500 transition">
          Complete Import Guide
        </summary>

        <div class="space-y-6 mt-6">
          <!-- Step 1 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              1
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Build Your Import List</h3>
              <p class="text-gray-600">Use the catalog browser below to search for glass items you own. Click "Add" to add them to your import list. Adjust quantities as needed.</p>
            </div>
          </div>

          <!-- Step 2 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              2
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Export the JSON File</h3>
              <p class="text-gray-600 mb-2">Click the "Export JSON" button in the import list panel. This will download a file named something like <code class="bg-gray-100 px-2 py-1 rounded text-sm">molten-import-2025-10-23.json</code></p>
            </div>
          </div>

          <!-- Step 3 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              3
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Transfer to Your iPhone</h3>
              <p class="text-gray-600 mb-3">Choose one of these methods:</p>
              <ul class="space-y-2 text-gray-600">
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>Email:</strong> Email the file to yourself, open the email on your iPhone, and tap the attachment
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>AirDrop:</strong> On Mac, right-click the file → Share → AirDrop to your iPhone
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>iCloud Drive:</strong> Save the file to iCloud Drive on your computer, then open Files app on iPhone → iCloud Drive
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>Direct on iPhone:</strong> Visit this page on your iPhone and export directly
                  </div>
                </li>
              </ul>
            </div>
          </div>

          <!-- Step 4 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              4
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Import into Molten</h3>
              <p class="text-gray-600 mb-3">Once you have the file on your iPhone:</p>
              <ul class="space-y-2 text-gray-600">
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>If you tapped the file attachment:</strong> Tap the share button → scroll and find "Molten" in the list of apps → tap to import
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>From Files app:</strong> Tap and hold the .json file → Share → Molten
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>From within Molten:</strong> Open Molten → Inventory tab → tap the menu button (⋯) → "Import from File" → select your file
                  </div>
                </li>
              </ul>
            </div>
          </div>

          <!-- Step 5 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              5
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Review and Confirm</h3>
              <p class="text-gray-600">Molten will show you a preview of what will be imported. Review the items and tap "Import" to add them to your inventory.</p>
            </div>
          </div>

          <!-- Note -->
          <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded">
            <div class="flex gap-3">
              <span class="text-blue-600 text-xl">ℹ️</span>
              <div>
                <p class="text-sm text-blue-900">
                  <strong>Note:</strong> Specify quantity, type, and location for each item before export. You can save and re-load your import list using the "Load JSON" button to continue editing.
                </p>
              </div>
            </div>
          </div>
        </div>
      </details>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">

        <!-- Left Column: Catalog Browser -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-lg shadow-sm p-6">
            <h2 class="text-2xl font-bold mb-4">Browse Glass Catalog</h2>

            <!-- Search and Filters -->
            <div class="space-y-4 mb-6">
              <input
                type="text"
                id="searchInput"
                placeholder="Search by name, code, or manufacturer..."
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />

              <div class="flex gap-4 flex-wrap">
                <select id="coeFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                  <option value="">All COE</option>
                  <option value="33">COE 33</option>
                  <option value="90">COE 90</option>
                  <option value="96">COE 96</option>
                  <option value="104">COE 104</option>
                </select>

                <select id="manufacturerFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                  <option value="">All Manufacturers</option>
                </select>
              </div>
            </div>

            <!-- Results Count -->
            <div class="text-sm text-gray-600 mb-4">
              Showing <span id="resultCount">0</span> items
            </div>

            <!-- Catalog Items List -->
            <div id="catalogList" class="space-y-3 max-h-[600px] overflow-y-auto">
              <div class="text-center text-gray-500 py-8">Loading catalog...</div>
            </div>
          </div>
        </div>

        <!-- Right Column: Import Cart -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow-sm p-6 sticky top-4">
            <h2 class="text-2xl font-bold mb-4">Import List</h2>

            <div id="importCart" class="space-y-3 mb-6 max-h-[400px] overflow-y-auto">
              <div class="text-center text-gray-400 py-8 text-sm">
                No items added yet
              </div>
            </div>

            <div class="border-t pt-4">
              <div class="text-lg font-semibold mb-4">
                Total: <span id="cartCount">0</span> items
              </div>

              <button
                id="exportBtn"
                disabled
                class="w-full gradient-orange text-white px-6 py-3 rounded-lg font-bold hover:opacity-90 transition disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Export JSON
              </button>

              <button
                id="loadBtn"
                class="w-full mt-2 bg-blue-500 text-white px-6 py-2 rounded-lg font-medium hover:bg-blue-600 transition"
              >
                Load JSON
              </button>

              <button
                id="clearBtn"
                class="w-full mt-2 bg-gray-100 text-gray-700 px-6 py-2 rounded-lg font-medium hover:bg-gray-200 transition"
              >
                Clear All
              </button>

              <input type="file" id="fileInput" accept=".json" class="hidden" />
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    // State
    let catalog = [];
    let filteredCatalog = [];
    let importList = [];

    // Load catalog
    async function loadCatalog() {
      try {
        const response = await fetch('/glassitems.json');
        const data = await response.json();
        catalog = data.glassitems;
        filteredCatalog = [...catalog];

        // Populate manufacturer filter
        const manufacturers = [...new Set(catalog.map(item => item.manufacturer))].sort();
        const mfgFilter = document.getElementById('manufacturerFilter');
        manufacturers.forEach(mfg => {
          const option = document.createElement('option');
          option.value = mfg;
          option.textContent = mfg;
          mfgFilter.appendChild(option);
        });

        renderCatalog();
      } catch (error) {
        console.error('Error loading catalog:', error);
        document.getElementById('catalogList').innerHTML =
          '<div class="text-center text-red-500 py-8">Error loading catalog</div>';
      }
    }

    // Filter catalog
    function filterCatalog() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const coeFilter = document.getElementById('coeFilter').value;
      const mfgFilter = document.getElementById('manufacturerFilter').value;

      filteredCatalog = catalog.filter(item => {
        const matchesSearch = !searchTerm ||
          item.name.toLowerCase().includes(searchTerm) ||
          item.code.toLowerCase().includes(searchTerm) ||
          item.manufacturer.toLowerCase().includes(searchTerm);

        const matchesCOE = !coeFilter || item.coe === coeFilter;
        const matchesMfg = !mfgFilter || item.manufacturer === mfgFilter;

        return matchesSearch && matchesCOE && matchesMfg;
      });

      renderCatalog();
    }

    // Render catalog
    function renderCatalog() {
      const container = document.getElementById('catalogList');
      const resultCount = document.getElementById('resultCount');

      resultCount.textContent = filteredCatalog.length;

      if (filteredCatalog.length === 0) {
        container.innerHTML = '<div class="text-center text-gray-400 py-8">No items found</div>';
        return;
      }

      container.innerHTML = filteredCatalog.slice(0, 50).map(item => `
        <div class="flex items-center gap-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
          ${item.image_url ? `
            <img src="${item.image_url}" alt="${item.name}" class="w-12 h-12 rounded object-cover" />
          ` : `
            <div class="w-12 h-12 bg-gray-200 rounded flex items-center justify-center text-xs text-gray-500">
              No img
            </div>
          `}
          <div class="flex-1 min-w-0">
            <div class="font-semibold text-gray-900 truncate">${item.name}</div>
            <div class="text-sm text-gray-500">${item.manufacturer} - ${item.code}</div>
            <div class="text-xs text-gray-400">COE ${item.coe}</div>
          </div>
          <button
            onclick="addToCart('${item.code}')"
            class="px-4 py-2 bg-orange-500 text-white rounded-lg text-sm font-medium hover:bg-orange-600 transition flex-shrink-0"
          >
            Add
          </button>
        </div>
      `).join('');

      if (filteredCatalog.length > 50) {
        container.innerHTML += `
          <div class="text-center text-sm text-gray-500 py-4">
            Showing first 50 of ${filteredCatalog.length} results. Refine your search to see more.
          </div>
        `;
      }
    }

    // Add to cart
    function addToCart(code) {
      const item = catalog.find(i => i.code === code);
      if (!item) return;

      // Check if already in cart
      if (importList.find(i => i.code === code)) {
        alert('Item already in import list');
        return;
      }

      importList.push({
        ...item,
        quantity: 1,
        type: 'rods',  // Default type
        location: ''   // Default empty location
      });

      renderCart();
    }

    // Remove from cart
    function removeFromCart(code) {
      importList = importList.filter(i => i.code !== code);
      renderCart();
    }

    // Update quantity
    function updateQuantity(code, quantity) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.quantity = Math.max(1, parseInt(quantity) || 1);
        renderCart();
      }
    }

    // Update type
    function updateType(code, type) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.type = type;
        renderCart();
      }
    }

    // Update location
    function updateLocation(code, location) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.location = location;
      }
    }

    // Render cart
    function renderCart() {
      const container = document.getElementById('importCart');
      const cartCount = document.getElementById('cartCount');
      const exportBtn = document.getElementById('exportBtn');

      cartCount.textContent = importList.length;
      exportBtn.disabled = importList.length === 0;

      if (importList.length === 0) {
        container.innerHTML = `
          <div class="text-center text-gray-400 py-8 text-sm">
            No items added yet
          </div>
        `;
        return;
      }

      container.innerHTML = importList.map(item => `
        <div class="p-3 border border-gray-200 rounded-lg space-y-2">
          <div class="flex justify-between items-start">
            <div class="flex-1 min-w-0">
              <div class="font-semibold text-sm text-gray-900 truncate">${item.name}</div>
              <div class="text-xs text-gray-500">${item.manufacturer} - COE ${item.coe}</div>
            </div>
            <button
              onclick="removeFromCart('${item.code}')"
              class="text-red-500 hover:text-red-700 ml-2"
            >
              ✕
            </button>
          </div>
          <div class="grid grid-cols-2 gap-2">
            <select
              onchange="updateType('${item.code}', this.value)"
              class="px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-orange-500"
            >
              <option value="rods" ${item.type === 'rods' ? 'selected' : ''}>Rods</option>
              <option value="tubes" ${item.type === 'tubes' ? 'selected' : ''}>Tubes</option>
              <option value="frit" ${item.type === 'frit' ? 'selected' : ''}>Frit</option>
              <option value="sheet" ${item.type === 'sheet' ? 'selected' : ''}>Sheet</option>
              <option value="stringers" ${item.type === 'stringers' ? 'selected' : ''}>Stringers</option>
              <option value="other" ${item.type === 'other' ? 'selected' : ''}>Other</option>
            </select>
            <input
              type="number"
              min="1"
              value="${item.quantity}"
              onchange="updateQuantity('${item.code}', this.value)"
              class="px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-orange-500"
              placeholder="Qty"
            />
          </div>
          <input
            type="text"
            value="${item.location || ''}"
            oninput="updateLocation('${item.code}', this.value)"
            class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-orange-500"
            placeholder="Location (e.g., Shelf A, Box 3)"
          />
        </div>
      `).join('');
    }

    // Export JSON
    function exportJSON() {
      if (importList.length === 0) return;

      const exportData = {
        version: "1.0",
        generated: new Date().toISOString(),
        items: importList.map(item => ({
          code: item.code,
          name: item.name,
          manufacturer: item.manufacturer,
          coe: item.coe,
          type: item.type,
          quantity: item.quantity,
          location: item.location || ''
        }))
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `molten-import-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    // Load JSON
    async function loadJSON() {
      const input = document.getElementById('fileInput');
      input.click();
    }

    // Handle file selection
    async function handleFileLoad(event) {
      const file = event.target.files[0];
      if (!file) return;

      try {
        const text = await file.text();
        const data = JSON.parse(text);

        if (data.version !== '1.0') {
          alert('Unsupported file version: ' + data.version);
          return;
        }

        // Load items from file
        importList = data.items.map(item => {
          // Find the full catalog item data
          const catalogItem = catalog.find(c => c.code === item.code);
          if (!catalogItem) {
            console.warn('Item not found in catalog:', item.code);
            return null;
          }

          return {
            ...catalogItem,
            quantity: item.quantity || 1,
            type: item.type || 'rods',
            location: item.location || ''
          };
        }).filter(item => item !== null);

        renderCart();
        alert(`Loaded ${importList.length} items from ${file.name}`);
      } catch (error) {
        console.error('Error loading file:', error);
        alert('Error loading file: ' + error.message);
      }

      // Reset file input
      event.target.value = '';
    }

    // Clear cart
    function clearCart() {
      if (importList.length === 0) return;
      if (confirm('Clear all items from import list?')) {
        importList = [];
        renderCart();
      }
    }

    // Make functions global
    window.addToCart = addToCart;
    window.removeFromCart = removeFromCart;
    window.updateQuantity = updateQuantity;
    window.updateType = updateType;
    window.updateLocation = updateLocation;

    // Event listeners
    document.getElementById('searchInput').addEventListener('input', filterCatalog);
    document.getElementById('coeFilter').addEventListener('change', filterCatalog);
    document.getElementById('manufacturerFilter').addEventListener('change', filterCatalog);
    document.getElementById('exportBtn').addEventListener('click', exportJSON);
    document.getElementById('loadBtn').addEventListener('click', loadJSON);
    document.getElementById('fileInput').addEventListener('change', handleFileLoad);
    document.getElementById('clearBtn').addEventListener('click', clearCart);

    // Initialize
    loadCatalog();
  </script>
</Layout>
