---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Import Tool - Molten" description="Import your glass inventory into Molten">
  <!-- Hero Section -->
  <section class="gradient-orange text-white py-16">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1 class="text-5xl md:text-6xl font-bold mb-6">
        Inventory Import Tool
      </h1>
      <p class="text-xl text-white/90">
        Build your inventory list here, then import it into Molten
      </p>
    </div>
  </section>

  <!-- Main Content -->
  <section class="py-12 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

      <!-- Instructions -->
      <details class="bg-white rounded-lg shadow-sm p-6 mb-8" open>
        <summary class="text-2xl font-bold mb-6 cursor-pointer hover:text-orange-500 transition">
          Complete Import Guide
        </summary>

        <div class="space-y-6 mt-6">
          <!-- Step 1 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              1
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Build Your Import List</h3>
              <p class="text-gray-600">Use the catalog browser below to search for glass items you own. Click "Add" to add them to your import list. Adjust quantities as needed.</p>
            </div>
          </div>

          <!-- Step 2 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              2
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Export the JSON File</h3>
              <p class="text-gray-600 mb-2">Click the "Export JSON" button in the import list panel. This will download a file named something like <code class="bg-gray-100 px-2 py-1 rounded text-sm">molten-import-2025-10-23.json</code></p>
            </div>
          </div>

          <!-- Step 3 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              3
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Transfer to Your iPhone</h3>
              <p class="text-gray-600 mb-3">Choose one of these methods:</p>
              <ul class="space-y-2 text-gray-600">
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>Email:</strong> Email the file to yourself, open the email on your iPhone, and tap the attachment
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>AirDrop:</strong> On Mac, right-click the file → Share → AirDrop to your iPhone
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>iCloud Drive:</strong> Save the file to iCloud Drive on your computer, then open Files app on iPhone → iCloud Drive
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>Direct on iPhone:</strong> Visit this page on your iPhone and export directly
                  </div>
                </li>
              </ul>
            </div>
          </div>

          <!-- Step 4 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              4
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Import into Molten</h3>
              <p class="text-gray-600 mb-3">Once you have the file on your iPhone:</p>
              <ul class="space-y-2 text-gray-600">
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>If you tapped the file attachment:</strong> Tap the share button → scroll and find "Molten" in the list of apps → tap to import
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>From Files app:</strong> Tap and hold the .json file → Share → Molten
                  </div>
                </li>
                <li class="flex gap-2">
                  <span class="text-orange-500">•</span>
                  <div>
                    <strong>From within Molten:</strong> Open Molten → Inventory tab → tap the menu button (⋯) → "Import from File" → select your file
                  </div>
                </li>
              </ul>
            </div>
          </div>

          <!-- Step 5 -->
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 rounded-full bg-orange-500 text-white flex items-center justify-center font-bold">
              5
            </div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Review and Confirm</h3>
              <p class="text-gray-600">Molten will show you a preview of what will be imported. Review the items and tap "Import" to add them to your inventory.</p>
            </div>
          </div>

          <!-- Note -->
          <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded">
            <div class="flex gap-3">
              <span class="text-blue-600 text-xl">ℹ️</span>
              <div>
                <p class="text-sm text-blue-900">
                  <strong>Note:</strong> Specify quantity, type, and location for each item before export. You can save and re-load your import list using the "Load JSON" button to continue editing.
                </p>
              </div>
            </div>
          </div>

          <!-- Collapse Button -->
          <div class="text-center mt-4">
            <button
              onclick="document.querySelector('details').removeAttribute('open')"
              class="text-orange-500 hover:text-orange-600 font-medium text-sm transition"
            >
              ▲ Collapse Guide
            </button>
          </div>
        </div>
      </details>

      <div class="grid grid-cols-1 lg:grid-cols-5 gap-8">

        <!-- Left Column: Catalog Browser -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-lg shadow-sm p-6">
            <h2 class="text-2xl font-bold mb-4">Browse Glass Catalog</h2>

            <!-- Search and Filters -->
            <div class="space-y-4 mb-6">
              <input
                type="text"
                id="searchInput"
                placeholder="Search by name, code, or manufacturer..."
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
              />

              <div class="flex gap-4 flex-wrap">
                <select id="coeFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                  <option value="">All COE</option>
                  <option value="33">COE 33</option>
                  <option value="90">COE 90</option>
                  <option value="96">COE 96</option>
                  <option value="104">COE 104</option>
                </select>

                <select id="manufacturerFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                  <option value="">All Manufacturers</option>
                </select>
              </div>
            </div>

            <!-- Results Count -->
            <div class="text-sm text-gray-600 mb-4">
              Showing <span id="resultCount">0</span> items
            </div>

            <!-- Catalog Items List -->
            <div id="catalogList" class="space-y-3 max-h-[600px] overflow-y-auto">
              <div class="text-center text-gray-500 py-8">Loading catalog...</div>
            </div>
          </div>
        </div>

        <!-- Right Column: Import Cart -->
        <div class="lg:col-span-3">
          <div class="bg-white rounded-lg shadow-sm p-6 sticky top-4">
            <h2 class="text-2xl font-bold mb-4">Import List</h2>

            <div class="border-b pb-4 mb-4">
              <div class="text-lg font-semibold mb-4">
                Total: <span id="cartCount">0</span> items
              </div>

              <button
                id="exportBtn"
                disabled
                class="w-full gradient-orange text-white px-6 py-3 rounded-lg font-bold hover:opacity-90 transition disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Export JSON
              </button>

              <button
                id="loadBtn"
                class="w-full mt-2 bg-blue-500 text-white px-6 py-2 rounded-lg font-medium hover:bg-blue-600 transition"
              >
                Load JSON
              </button>

              <button
                id="clearBtn"
                class="w-full mt-2 bg-gray-100 text-gray-700 px-6 py-2 rounded-lg font-medium hover:bg-gray-200 transition"
              >
                Clear All
              </button>

              <input type="file" id="fileInput" accept=".json" class="hidden" />
            </div>

            <div id="importCart" class="space-y-3 max-h-[600px] overflow-y-auto">
              <div class="text-center text-gray-400 py-8 text-sm">
                No items added yet
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script>
    // State
    let catalog = [];
    let filteredCatalog = [];
    let importList = [];

    // Manufacturers without product image permission
    const noImagePermission = ['CiM', 'DS', 'GAF'];

    // Manufacturer code to full name mapping (from GlassManufacturers.swift)
    const manufacturerNames = {
      "BB": "Boro Batch",
      "BE": "Bullseye Glass",
      "CHB": "Chinese Boro",
      "CiM": "Creation is Messy",
      "DH": "Double Helix",
      "DS": "Delphi Superior",
      "EF": "Effetre",
      "GA": "Glass Alchemy",
      "GAF": "Gaffer",
      "GRE": "Greasy Glass",
      "KUG": "Kugler",
      "MA": "Molten Aura Labs",
      "MOM": "Momka Glass",
      "NS": "Northstar Glassworks",
      "OC": "Oceanside Glass",
      "OR": "Origin Glass",
      "PAR": "Parramore Glass",
      "PDX": "PDX Tubing Co",
      "RE": "Reichenbach",
      "TAG": "Trautmann Art Glass",
      "UST": "UST Glass",
      "VF": "Vetrofond",
      "WM": "Wissmach Glass",
      "Y96": "Youghiogheny Glass"
    };

    // Get full manufacturer name from code
    function getManufacturerName(code) {
      return manufacturerNames[code] || code;
    }

    // Type subtypes mapping (from GlassItemTypeSystem.swift)
    const typeSubtypes = {
      "rod": ["standard", "cane", "pull"],
      "stringer": ["1mm", "2mm", "Hand-pulled"],
      "stringers": ["1mm", "2mm", "Hand-pulled"],  // Alias
      "sheet": ["full", "half", "10x10", "other"],
      "frit": ["#25", "#38", "#70", "#82", "#100", "coarse", "medium", "fine"],
      "tube": ["thin wall", "thick wall", "standard"],
      "tubes": ["thin wall", "thick wall", "standard"],  // Alias
      "enamel": ["opaque", "transparent"]
    };

    // Get subtypes for a type
    function getSubtypes(type) {
      return typeSubtypes[type] || [];
    }

    // Check if type has subtypes
    function hasSubtypes(type) {
      return getSubtypes(type).length > 0;
    }

    // Load catalog
    async function loadCatalog() {
      try {
        const response = await fetch('/glassitems.json');
        const data = await response.json();
        catalog = data.glassitems;
        filteredCatalog = [...catalog];

        // Populate manufacturer filter
        const manufacturers = [...new Set(catalog.map(item => item.manufacturer))].sort();
        const mfgFilter = document.getElementById('manufacturerFilter');
        manufacturers.forEach(mfg => {
          const option = document.createElement('option');
          option.value = mfg;
          option.textContent = mfg;
          mfgFilter.appendChild(option);
        });

        renderCatalog();
      } catch (error) {
        console.error('Error loading catalog:', error);
        document.getElementById('catalogList').innerHTML =
          '<div class="text-center text-red-500 py-8">Error loading catalog</div>';
      }
    }

    // Filter catalog
    function filterCatalog() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const coeFilter = document.getElementById('coeFilter').value;
      const mfgFilter = document.getElementById('manufacturerFilter').value;

      filteredCatalog = catalog.filter(item => {
        const matchesSearch = !searchTerm ||
          item.name.toLowerCase().includes(searchTerm) ||
          item.code.toLowerCase().includes(searchTerm) ||
          item.manufacturer.toLowerCase().includes(searchTerm);

        const matchesCOE = !coeFilter || item.coe === coeFilter;
        const matchesMfg = !mfgFilter || item.manufacturer === mfgFilter;

        return matchesSearch && matchesCOE && matchesMfg;
      });

      renderCatalog();
    }

    // Render catalog
    function renderCatalog() {
      const container = document.getElementById('catalogList');
      const resultCount = document.getElementById('resultCount');

      resultCount.textContent = filteredCatalog.length;

      if (filteredCatalog.length === 0) {
        container.innerHTML = '<div class="text-center text-gray-400 py-8">No items found</div>';
        return;
      }

      container.innerHTML = filteredCatalog.slice(0, 50).map(item => {
        const showImage = item.image_url && !noImagePermission.includes(item.manufacturer);
        const mfrName = getManufacturerName(item.manufacturer);
        return `
        <div class="flex items-center gap-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
          ${showImage ? `
            <img src="${item.image_url}" alt="${item.name}" class="w-12 h-12 rounded object-cover" />
          ` : `
            <div class="w-12 h-12 bg-gray-200 rounded flex items-center justify-center text-xs text-gray-500">
              No img
            </div>
          `}
          <div class="flex-1 min-w-0">
            <div class="font-semibold text-gray-900 truncate">${item.name}</div>
            <div class="text-sm text-gray-500">
              ${item.manufacturer_url ?
                `<a href="${item.manufacturer_url}" target="_blank" class="hover:text-orange-500 hover:underline">${mfrName}</a>` :
                mfrName
              } - ${item.code}
            </div>
            <div class="text-xs text-gray-400">COE ${item.coe}</div>
          </div>
          <button
            onclick="addToCart('${item.code}')"
            class="px-4 py-2 bg-orange-500 text-white rounded-lg text-sm font-medium hover:bg-orange-600 transition flex-shrink-0"
          >
            Add
          </button>
        </div>
      `;
      }).join('');

      if (filteredCatalog.length > 50) {
        container.innerHTML += `
          <div class="text-center text-sm text-gray-500 py-4">
            Showing first 50 of ${filteredCatalog.length} results. Refine your search to see more.
          </div>
        `;
      }
    }

    // Add to cart
    function addToCart(code) {
      const item = catalog.find(i => i.code === code);
      if (!item) return;

      // Check if already in cart
      if (importList.find(i => i.code === code)) {
        alert('Item already in import list');
        return;
      }

      importList.push({
        ...item,
        quantity: 1,
        type: 'rods',  // Default type
        subtype: '',   // Default no subtype
        location: '',  // Default empty location
        confirmed: false  // Start in expanded/unconfirmed state
      });

      renderCart();

      // Focus on the quantity field for the newly added item
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          const quantityInput = document.querySelector(`input[data-code="${code}"][type="number"]`);
          if (quantityInput) {
            quantityInput.focus();
            quantityInput.select();
          }
        });
      });
    }

    // Confirm cart item (collapse it)
    function confirmItem(code) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.confirmed = true;
        renderCart();

        // Return focus to search
        document.getElementById('searchInput').focus();
      }
    }

    // Expand cart item for editing
    function expandItem(code) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.confirmed = false;
        renderCart();

        // Focus on quantity field
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            const quantityInput = document.querySelector(`input[data-code="${code}"][type="number"]`);
            if (quantityInput) {
              quantityInput.focus();
              quantityInput.select();
            }
          });
        });
      }
    }

    // Remove from cart
    function removeFromCart(code) {
      importList = importList.filter(i => i.code !== code);
      renderCart();
    }

    // Update quantity
    function updateQuantity(code, quantity) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.quantity = Math.max(1, parseInt(quantity) || 1);
        renderCart();
      }
    }

    // Update type
    function updateType(code, type) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.type = type;
        // Reset subtype when type changes
        item.subtype = '';
        renderCart();
      }
    }

    // Update subtype
    function updateSubtype(code, subtype) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.subtype = subtype;
      }
    }

    // Update location
    function updateLocation(code, location) {
      const item = importList.find(i => i.code === code);
      if (item) {
        item.location = location;
      }
    }

    // Handle Enter key in form fields
    function handleFormKeyDown(event, code) {
      if (event.key === 'Enter') {
        event.preventDefault();
        confirmItem(code);
      }
    }

    // Render cart
    function renderCart() {
      const container = document.getElementById('importCart');
      const cartCount = document.getElementById('cartCount');
      const exportBtn = document.getElementById('exportBtn');

      // Only count confirmed items
      const confirmedCount = importList.filter(i => i.confirmed).length;
      cartCount.textContent = confirmedCount;
      exportBtn.disabled = confirmedCount === 0;

      if (importList.length === 0) {
        container.innerHTML = `
          <div class="text-center text-gray-400 py-8 text-sm">
            No items added yet
          </div>
        `;
        return;
      }

      container.innerHTML = importList.map(item => {
        if (item.confirmed) {
          // Collapsed state - single line with pencil icon
          const typeDisplay = item.subtype ? `${item.type} (${item.subtype})` : item.type;
          return `
            <div class="p-3 border border-gray-200 rounded-lg bg-gray-50">
              <div class="flex items-center justify-between gap-2">
                <div class="flex-1 min-w-0">
                  <div class="font-medium text-sm text-gray-900 truncate">${item.name}</div>
                  <div class="text-xs text-gray-500">${item.quantity} ${typeDisplay}${item.location ? ` • ${item.location}` : ''}</div>
                </div>
                <div class="flex items-center gap-2 flex-shrink-0">
                  <button
                    onclick="expandItem('${item.code}')"
                    class="p-2 text-gray-600 hover:text-orange-500 transition"
                    title="Edit"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                    </svg>
                  </button>
                  <button
                    onclick="removeFromCart('${item.code}')"
                    class="p-2 text-red-500 hover:text-red-700 transition"
                    title="Remove"
                  >
                    ✕
                  </button>
                </div>
              </div>
            </div>
          `;
        } else {
          // Expanded state - full form with Add button
          const mfrName = getManufacturerName(item.manufacturer);
          return `
            <div class="p-3 border-2 border-orange-300 rounded-lg bg-orange-50/50">
              <div class="flex justify-between items-start mb-3">
                <div class="flex-1 min-w-0">
                  <div class="font-semibold text-sm text-gray-900 truncate">${item.name}</div>
                  <div class="text-xs text-gray-500">${mfrName} - COE ${item.coe}</div>
                </div>
                <button
                  onclick="removeFromCart('${item.code}')"
                  class="text-red-500 hover:text-red-700 ml-2"
                >
                  ✕
                </button>
              </div>
              <div class="space-y-2">
                <div class="grid grid-cols-2 gap-2">
                  <input
                    type="number"
                    min="1"
                    value="${item.quantity}"
                    onchange="updateQuantity('${item.code}', this.value)"
                    onkeydown="handleFormKeyDown(event, '${item.code}')"
                    data-code="${item.code}"
                    tabindex="0"
                    class="px-2 py-1 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-orange-500"
                    placeholder="Quantity"
                  />
                  <select
                    onchange="updateType('${item.code}', this.value)"
                    onkeydown="handleFormKeyDown(event, '${item.code}')"
                    tabindex="0"
                    class="px-2 py-1 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-orange-500"
                  >
                    <option value="rods" ${item.type === 'rods' ? 'selected' : ''}>Rods</option>
                    <option value="tubes" ${item.type === 'tubes' ? 'selected' : ''}>Tubes</option>
                    <option value="frit" ${item.type === 'frit' ? 'selected' : ''}>Frit</option>
                    <option value="sheet" ${item.type === 'sheet' ? 'selected' : ''}>Sheet</option>
                    <option value="stringers" ${item.type === 'stringers' ? 'selected' : ''}>Stringers</option>
                    <option value="enamel" ${item.type === 'enamel' ? 'selected' : ''}>Enamel</option>
                    <option value="other" ${item.type === 'other' ? 'selected' : ''}>Other</option>
                  </select>
                </div>
                ${hasSubtypes(item.type) ? `
                <select
                  onchange="updateSubtype('${item.code}', this.value)"
                  onkeydown="handleFormKeyDown(event, '${item.code}')"
                  tabindex="0"
                  class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-orange-500"
                >
                  <option value="">No subtype</option>
                  ${getSubtypes(item.type).map(st => `
                    <option value="${st}" ${item.subtype === st ? 'selected' : ''}>${st}</option>
                  `).join('')}
                </select>
                ` : ''}
                <input
                  type="text"
                  value="${item.location || ''}"
                  oninput="updateLocation('${item.code}', this.value)"
                  onkeydown="handleFormKeyDown(event, '${item.code}')"
                  tabindex="0"
                  class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-2 focus:ring-orange-500"
                  placeholder="Location (e.g., Shelf A, Box 3)"
                />
                <button
                  onclick="confirmItem('${item.code}')"
                  tabindex="0"
                  class="w-full px-4 py-2 bg-orange-500 text-white rounded-lg font-medium hover:bg-orange-600 transition"
                >
                  Add to List
                </button>
              </div>
            </div>
          `;
        }
      }).join('');
    }

    // Export JSON
    function exportJSON() {
      // Only export confirmed items
      const confirmedItems = importList.filter(i => i.confirmed);
      if (confirmedItems.length === 0) {
        alert('Please confirm at least one item before exporting.');
        return;
      }

      const exportData = {
        version: "1.0",
        generated: new Date().toISOString(),
        items: confirmedItems.map(item => ({
          code: item.code,
          name: item.name,
          manufacturer: item.manufacturer,
          coe: item.coe,
          type: item.type,
          subtype: item.subtype || '',
          quantity: item.quantity,
          location: item.location || ''
        }))
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `molten-import-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    // Load JSON
    async function loadJSON() {
      const input = document.getElementById('fileInput');
      input.click();
    }

    // Handle file selection
    async function handleFileLoad(event) {
      const file = event.target.files[0];
      if (!file) return;

      try {
        const text = await file.text();
        const data = JSON.parse(text);

        if (data.version !== '1.0') {
          alert('Unsupported file version: ' + data.version);
          return;
        }

        // Load items from file as confirmed (already set up)
        importList = data.items.map(item => {
          // Find the full catalog item data
          const catalogItem = catalog.find(c => c.code === item.code);
          if (!catalogItem) {
            console.warn('Item not found in catalog:', item.code);
            return null;
          }

          return {
            ...catalogItem,
            quantity: item.quantity || 1,
            type: item.type || 'rods',
            subtype: item.subtype || '',
            location: item.location || '',
            confirmed: true  // Loaded items are already configured
          };
        }).filter(item => item !== null);

        renderCart();
        alert(`Loaded ${importList.length} items from ${file.name}`);
      } catch (error) {
        console.error('Error loading file:', error);
        alert('Error loading file: ' + error.message);
      }

      // Reset file input
      event.target.value = '';
    }

    // Clear cart
    function clearCart() {
      if (importList.length === 0) return;
      if (confirm('Clear all items from import list?')) {
        importList = [];
        renderCart();
      }
    }

    // Make functions global
    window.addToCart = addToCart;
    window.removeFromCart = removeFromCart;
    window.updateQuantity = updateQuantity;
    window.updateType = updateType;
    window.updateSubtype = updateSubtype;
    window.updateLocation = updateLocation;
    window.confirmItem = confirmItem;
    window.expandItem = expandItem;
    window.handleFormKeyDown = handleFormKeyDown;

    // Event listeners
    document.getElementById('searchInput').addEventListener('input', filterCatalog);
    document.getElementById('searchInput').addEventListener('keydown', (event) => {
      if (event.key === 'Enter' && filteredCatalog.length === 1) {
        event.preventDefault();
        addToCart(filteredCatalog[0].code);
        document.getElementById('searchInput').value = '';
        filterCatalog();
      }
    });
    document.getElementById('coeFilter').addEventListener('change', filterCatalog);
    document.getElementById('manufacturerFilter').addEventListener('change', filterCatalog);
    document.getElementById('exportBtn').addEventListener('click', exportJSON);
    document.getElementById('loadBtn').addEventListener('click', loadJSON);
    document.getElementById('fileInput').addEventListener('change', handleFileLoad);
    document.getElementById('clearBtn').addEventListener('click', clearCart);

    // Initialize
    loadCatalog();
  </script>
</Layout>
