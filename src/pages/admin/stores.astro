---
import Layout from '../../layouts/Layout.astro';

// IMPORTANT: Disable prerendering for admin pages (required for Cloudflare)
export const prerender = false;
---

<Layout title="Store Approval Queue - Molten Admin">
  <section class="py-16 min-h-screen bg-gray-50">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Login Form -->
      <div id="loginGate" class="max-w-md mx-auto">
        <div class="bg-white rounded-lg shadow-lg p-8">
          <h1 class="text-2xl font-bold mb-4">Admin Login</h1>
          <p class="text-gray-600 mb-6">Enter your admin password to access the store approval queue.</p>

          <form id="loginForm">
            <input
              type="password"
              id="passwordInput"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent mb-4"
              placeholder="Enter password"
              autocomplete="current-password"
              required
            />

            <button
              type="submit"
              id="loginButton"
              class="w-full bg-orange-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-orange-600 transition disabled:opacity-50"
            >
              Login
            </button>
          </form>

          <div id="loginError" class="hidden mt-4 p-3 bg-red-50 border border-red-200 text-red-800 rounded-lg text-sm"></div>
        </div>
      </div>

      <!-- Admin Content (hidden until authenticated) -->
      <div id="adminContent" class="hidden">
        <!-- Header -->
        <div class="mb-8">
          <h1 class="text-4xl font-bold mb-2">Store Approval Queue</h1>
          <p class="text-lg text-gray-600">Review and approve store submissions</p>
          <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <p class="text-sm text-blue-800">
              <strong>âœ¨ Auto-Geocoding:</strong> When you approve a store, the system automatically looks up its coordinates using OpenStreetMap (free, no API key needed). Check the browser console for geocoding results.
            </p>
          </div>
        </div>

        <!-- Stats -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div class="bg-white rounded-lg shadow p-6">
            <div class="text-3xl font-bold text-orange-500" id="pendingCount">0</div>
            <div class="text-gray-600">Pending</div>
          </div>
          <div class="bg-white rounded-lg shadow p-6">
            <div class="text-3xl font-bold text-green-500" id="approvedCount">0</div>
            <div class="text-gray-600">Approved</div>
          </div>
          <div class="bg-white rounded-lg shadow p-6">
            <div class="text-3xl font-bold text-gray-500" id="rejectedCount">0</div>
            <div class="text-gray-600">Rejected</div>
          </div>
        </div>

        <!-- Filter Tabs -->
        <div class="mb-6 flex gap-2">
          <button data-filter="pending" class="filter-btn px-4 py-2 rounded-lg font-medium bg-orange-500 text-white">
            Pending
          </button>
          <button data-filter="approved" class="filter-btn px-4 py-2 rounded-lg font-medium bg-gray-200 text-gray-700">
            Approved
          </button>
          <button data-filter="rejected" class="filter-btn px-4 py-2 rounded-lg font-medium bg-gray-200 text-gray-700">
            Rejected
          </button>
        </div>

        <!-- Loading State -->
        <div id="loadingState" class="text-center py-12">
          <div class="text-gray-500">Loading submissions...</div>
        </div>

        <!-- Empty State -->
        <div id="emptyState" class="hidden text-center py-12">
          <div class="text-gray-500 text-lg">No submissions found</div>
        </div>

        <!-- Submissions List -->
        <div id="submissionsList" class="space-y-6">
          <!-- Dynamically populated -->
        </div>

        <!-- Admin Actions -->
        <div class="mt-8 pt-8 border-t space-y-4">
          <div class="flex gap-4">
            <button
              id="migrateButton"
              class="bg-purple-500 text-white py-3 px-6 rounded-lg font-bold hover:bg-purple-600 transition"
            >
              ðŸ”„ Migrate Old IDs to Hash IDs
            </button>
            <button
              id="exportButton"
              class="bg-blue-500 text-white py-3 px-6 rounded-lg font-bold hover:bg-blue-600 transition"
            >
              Generate stores.json from Approved Stores
            </button>
          </div>
          <div id="migrateMessage" class="hidden p-4 rounded-lg"></div>
          <div id="exportMessage" class="hidden p-4 rounded-lg"></div>
        </div>
      </div>

      <!-- Edit Modal -->
      <div id="editModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div class="p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-2xl font-bold">Edit Store</h2>
              <button onclick="closeEditModal()" class="text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
            </div>

            <form id="editForm" class="space-y-4">
              <input type="hidden" id="edit_stable_id">

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Store Name *</label>
                <input type="text" id="edit_name" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
              </div>

              <!-- Current Website URL (clickable) -->
              <div id="currentWebsiteDisplay" class="hidden">
                <label class="block text-sm font-medium text-gray-700 mb-1">Current Website</label>
                <a id="currentWebsiteLink" href="" target="_blank" class="text-orange-500 hover:underline inline-flex items-center gap-1 text-sm">
                  <span id="currentWebsiteText"></span>
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                </a>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Address Line 1 *</label>
                <input type="text" id="edit_address_line1" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Address Line 2</label>
                <input type="text" id="edit_address_line2" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
              </div>

              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">City *</label>
                  <input type="text" id="edit_city" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">State *</label>
                  <input type="text" id="edit_state" required maxlength="2" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                </div>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">ZIP Code *</label>
                <input type="text" id="edit_zip" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                <input type="tel" id="edit_phone" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Website URL</label>
                <input type="url" id="edit_website_url" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                <textarea id="edit_notes" rows="3" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"></textarea>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Techniques Supported</label>
                <div class="space-y-2">
                  <label class="flex items-center">
                    <input type="checkbox" id="edit_supports_casting" class="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500">
                    <span class="ml-2 text-sm text-gray-700">Casting</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="edit_supports_flameworking_hard" class="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500">
                    <span class="ml-2 text-sm text-gray-700">Flameworking - Hard</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="edit_supports_flameworking_soft" class="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500">
                    <span class="ml-2 text-sm text-gray-700">Flameworking - Soft</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="edit_supports_fusing" class="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500">
                    <span class="ml-2 text-sm text-gray-700">Fusing</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="edit_supports_glass_blowing" class="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500">
                    <span class="ml-2 text-sm text-gray-700">Glass Blowing</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="edit_supports_stained_glass" class="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500">
                    <span class="ml-2 text-sm text-gray-700">Stained Glass</span>
                  </label>
                  <label class="flex items-center">
                    <input type="checkbox" id="edit_supports_other" class="w-4 h-4 text-orange-500 border-gray-300 rounded focus:ring-orange-500">
                    <span class="ml-2 text-sm text-gray-700">Other</span>
                  </label>
                </div>
              </div>

              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Latitude</label>
                  <input type="number" step="any" id="edit_latitude" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Longitude</label>
                  <input type="number" step="any" id="edit_longitude" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500">
                </div>
              </div>

              <div class="flex gap-3 pt-4">
                <button type="button" onclick="closeEditModal()" class="flex-1 bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-bold hover:bg-gray-300 transition">
                  Cancel
                </button>
                <button type="submit" id="saveEditButton" class="flex-1 bg-orange-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-orange-600 transition">
                  Save Changes
                </button>
              </div>
            </form>

            <div id="editError" class="hidden mt-4 p-3 bg-red-50 border border-red-200 text-red-800 rounded-lg text-sm"></div>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  const TOKEN_KEY = 'molten_admin_token';
  let currentFilter = 'pending';
  let submissions = [];
  let authToken = null;

  // Elements
  const loginGate = document.getElementById('loginGate');
  const adminContent = document.getElementById('adminContent');
  const loginForm = document.getElementById('loginForm');
  const loginButton = document.getElementById('loginButton');
  const loginError = document.getElementById('loginError');

  // Check for existing token on page load
  function checkExistingAuth() {
    const stored = localStorage.getItem(TOKEN_KEY);
    if (stored) {
      authToken = stored;
      showAdminInterface();
    }
  }

  // Handle login form submission
  loginForm?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const password = document.getElementById('passwordInput').value;
    loginButton.disabled = true;
    loginButton.textContent = 'Logging in...';
    loginError.classList.add('hidden');

    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ password })
      });

      const result = await response.json();

      if (response.ok && result.token) {
        // Store token
        authToken = result.token;
        localStorage.setItem(TOKEN_KEY, authToken);

        // Show admin interface
        showAdminInterface();
      } else {
        // Show error
        loginError.textContent = result.error || 'Invalid password';
        loginError.classList.remove('hidden');
      }
    } catch (error) {
      loginError.textContent = 'Network error. Please try again.';
      loginError.classList.remove('hidden');
    } finally {
      loginButton.disabled = false;
      loginButton.textContent = 'Login';
    }
  });

  function showAdminInterface() {
    loginGate.classList.add('hidden');
    adminContent.classList.remove('hidden');
    loadSubmissions();
  }

  function logout() {
    localStorage.removeItem(TOKEN_KEY);
    authToken = null;
    adminContent.classList.add('hidden');
    loginGate.classList.remove('hidden');
    loginError.classList.add('hidden');
    document.getElementById('passwordInput').value = '';
  }

  // Helper: Make authenticated API request
  async function authenticatedFetch(url, options = {}) {
    if (!authToken) {
      throw new Error('Not authenticated');
    }

    const headers = {
      ...options.headers,
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    };

    const response = await fetch(url, { ...options, headers });

    // If 401, token expired - logout
    if (response.status === 401) {
      alert('Session expired. Please log in again.');
      logout();
      throw new Error('Unauthorized');
    }

    return response;
  }

  // Check auth on page load
  checkExistingAuth();

  // Load submissions
  async function loadSubmissions() {
    try {
      const response = await authenticatedFetch('/api/list-stores');
      const data = await response.json();
      submissions = data.submissions || [];

      updateStats();
      renderSubmissions();
    } catch (error) {
      console.error('Error loading submissions:', error);
      document.getElementById('loadingState').innerHTML =
        '<div class="text-red-500">Error loading submissions</div>';
    }
  }

  // Update statistics
  function updateStats() {
    const pending = submissions.filter(s => s.status === 'pending').length;
    const approved = submissions.filter(s => s.status === 'approved').length;
    const rejected = submissions.filter(s => s.status === 'rejected').length;

    document.getElementById('pendingCount').textContent = pending;
    document.getElementById('approvedCount').textContent = approved;
    document.getElementById('rejectedCount').textContent = rejected;
  }

  // Render submissions
  function renderSubmissions() {
    const filtered = submissions.filter(s => s.status === currentFilter);

    const loadingState = document.getElementById('loadingState');
    const emptyState = document.getElementById('emptyState');
    const submissionsList = document.getElementById('submissionsList');

    loadingState.classList.add('hidden');

    if (filtered.length === 0) {
      emptyState.classList.remove('hidden');
      submissionsList.innerHTML = '';
      return;
    }

    emptyState.classList.add('hidden');

    submissionsList.innerHTML = filtered.map(store => `
      <div class="bg-white rounded-lg shadow-lg p-6" data-id="${store.stable_id}">
        <div class="flex justify-between items-start mb-4">
          <div>
            <h3 class="text-2xl font-bold">${store.name}</h3>
            ${store.website_url ? `
              <div class="text-sm mt-1">
                <a href="${store.website_url}" target="_blank" class="text-orange-500 hover:underline inline-flex items-center gap-1">
                  ${store.website_url}
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                </a>
              </div>
            ` : ''}
            <div class="text-sm text-gray-500 mt-1">ID: ${store.stable_id}</div>
            <div class="text-sm text-gray-500">Submitted: ${new Date(store.submitted_at).toLocaleString()}</div>
          </div>
          <span class="px-3 py-1 rounded-full text-sm font-medium ${
            store.status === 'pending' ? 'bg-orange-100 text-orange-800' :
            store.status === 'approved' ? 'bg-green-100 text-green-800' :
            'bg-gray-100 text-gray-800'
          }">
            ${store.status.charAt(0).toUpperCase() + store.status.slice(1)}
          </span>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <div class="font-semibold text-gray-700 mb-1">Address</div>
            <div class="text-gray-600">
              ${store.address_line1}<br>
              ${store.address_line2 ? store.address_line2 + '<br>' : ''}
              ${store.city}, ${store.state} ${store.zip}
            </div>
          </div>

          <div>
            ${store.phone ? `
              <div class="mb-2">
                <div class="font-semibold text-gray-700">Phone</div>
                <div class="text-gray-600">${store.phone}</div>
              </div>
            ` : ''}

            ${store.website_url ? `
              <div class="mb-2">
                <div class="font-semibold text-gray-700">Website</div>
                <div class="text-gray-600">
                  <a href="${store.website_url}" target="_blank" class="text-orange-500 hover:underline">
                    ${store.website_url}
                  </a>
                </div>
              </div>
            ` : ''}
          </div>
        </div>

        ${store.notes ? `
          <div class="mb-4">
            <div class="font-semibold text-gray-700 mb-1">Notes</div>
            <div class="text-gray-600">${store.notes}</div>
          </div>
        ` : ''}

        ${store.submitter ? `
          <div class="mb-4 p-3 bg-gray-50 rounded">
            <div class="font-semibold text-gray-700 mb-1">Submitter Info</div>
            <div class="text-sm text-gray-600">
              ${store.submitter.name ? `Name: ${store.submitter.name}<br>` : ''}
              ${store.submitter.email ? `Email: ${store.submitter.email}` : ''}
            </div>
          </div>
        ` : ''}

        <div class="flex gap-3 pt-4 border-t">
          ${store.status === 'pending' ? `
            <button
              onclick="approveStore('${store.stable_id}')"
              class="flex-1 bg-green-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-green-600 transition"
            >
              âœ“ Approve
            </button>
            <button
              onclick="rejectStore('${store.stable_id}')"
              class="flex-1 bg-red-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-red-600 transition"
            >
              âœ— Reject
            </button>
          ` : ''}
          <button
            onclick="openEditModal('${store.stable_id}')"
            class="flex-1 bg-blue-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-blue-600 transition"
          >
            âœŽ Edit
          </button>
        </div>
      </div>
    `).join('');
  }

  // Filter tabs
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      currentFilter = btn.dataset.filter;

      // Update button styles
      document.querySelectorAll('.filter-btn').forEach(b => {
        b.classList.remove('bg-orange-500', 'text-white');
        b.classList.add('bg-gray-200', 'text-gray-700');
      });
      btn.classList.remove('bg-gray-200', 'text-gray-700');
      btn.classList.add('bg-orange-500', 'text-white');

      renderSubmissions();
    });
  });

  // Approve/Reject actions (global scope for onclick)
  window.approveStore = async function(stableId) {

    try {
      const response = await authenticatedFetch('/api/approve-store', {
        method: 'POST',
        body: JSON.stringify({ stable_id: stableId })
      });

      if (response.ok) {
        await loadSubmissions();
      } else {
        const error = await response.json();
        alert('Error: ' + (error.error || 'Failed to approve store'));
      }
    } catch (error) {
      if (error.message !== 'Unauthorized') {
        alert('Network error. Please try again.');
      }
    }
  };

  window.rejectStore = async function(stableId) {

    try {
      const response = await authenticatedFetch('/api/reject-store', {
        method: 'POST',
        body: JSON.stringify({ stable_id: stableId })
      });

      if (response.ok) {
        await loadSubmissions();
      } else {
        const error = await response.json();
        alert('Error: ' + (error.error || 'Failed to reject store'));
      }
    } catch (error) {
      if (error.message !== 'Unauthorized') {
        alert('Network error. Please try again.');
      }
    }
  };

  // Migrate store IDs
  const migrateButton = document.getElementById('migrateButton');
  const migrateMessage = document.getElementById('migrateMessage');

  migrateButton?.addEventListener('click', async () => {
    if (!confirm('This will update all old-style store IDs (like "frantz-art-glass") to new hash IDs (like "a3f8c2d9e1b4"). Continue?')) {
      return;
    }

    try {
      migrateButton.disabled = true;
      migrateButton.textContent = 'Migrating...';

      const response = await authenticatedFetch('/api/migrate-store-ids', {
        method: 'POST'
      });

      const result = await response.json();

      if (response.ok) {
        if (result.migrations && result.migrations.length > 0) {
          migrateMessage.className = 'p-4 rounded-lg bg-green-50 border border-green-200 text-green-800';
          let message = `âœ… Migrated ${result.migrations.length} store(s):\n`;
          result.migrations.forEach(m => {
            message += `\nâ€¢ ${m.name}: ${m.old_id} â†’ ${m.new_id}`;
          });
          migrateMessage.innerHTML = message.replace(/\n/g, '<br>');
        } else {
          migrateMessage.className = 'p-4 rounded-lg bg-blue-50 border border-blue-200 text-blue-800';
          migrateMessage.textContent = 'âœ“ No stores needed migration - all IDs are already hash-based';
        }

        // Reload submissions to show new IDs
        await loadSubmissions();
      } else {
        migrateMessage.className = 'p-4 rounded-lg bg-red-50 border border-red-200 text-red-800';
        migrateMessage.textContent = result.error || 'Failed to migrate store IDs';
      }

      migrateMessage.classList.remove('hidden');
      setTimeout(() => migrateMessage.classList.add('hidden'), 10000);

    } catch (error) {
      migrateMessage.className = 'p-4 rounded-lg bg-red-50 border border-red-200 text-red-800';
      migrateMessage.textContent = 'Network error. Please try again.';
      migrateMessage.classList.remove('hidden');
    } finally {
      migrateButton.disabled = false;
      migrateButton.textContent = 'ðŸ”„ Migrate Old IDs to Hash IDs';
    }
  });

  // Export to stores.json
  const exportButton = document.getElementById('exportButton');
  const exportMessage = document.getElementById('exportMessage');

  exportButton?.addEventListener('click', async () => {
    try {
      exportButton.disabled = true;
      exportButton.textContent = 'Generating...';

      const response = await authenticatedFetch('/api/generate-stores', {
        method: 'POST'
      });

      const result = await response.json();

      if (response.ok) {
        exportMessage.className = 'mt-4 p-4 rounded-lg bg-green-50 border border-green-200 text-green-800';
        exportMessage.textContent = result.message || `Successfully generated stores.json with ${result.count} stores`;
      } else {
        exportMessage.className = 'mt-4 p-4 rounded-lg bg-red-50 border border-red-200 text-red-800';
        exportMessage.textContent = result.error || 'Failed to generate stores.json';
      }

      exportMessage.classList.remove('hidden');
      setTimeout(() => exportMessage.classList.add('hidden'), 5000);

    } catch (error) {
      exportMessage.className = 'mt-4 p-4 rounded-lg bg-red-50 border border-red-200 text-red-800';
      exportMessage.textContent = 'Network error. Please try again.';
      exportMessage.classList.remove('hidden');
    } finally {
      exportButton.disabled = false;
      exportButton.textContent = 'Generate stores.json from Approved Stores';
    }
  });

  // Edit modal functions
  const editModal = document.getElementById('editModal');
  const editForm = document.getElementById('editForm');
  const editError = document.getElementById('editError');

  window.openEditModal = function(stableId) {
    const store = submissions.find(s => s.stable_id === stableId);
    if (!store) return;

    // Populate form fields
    document.getElementById('edit_stable_id').value = store.stable_id;
    document.getElementById('edit_name').value = store.name;
    document.getElementById('edit_address_line1').value = store.address_line1;
    document.getElementById('edit_address_line2').value = store.address_line2 || '';
    document.getElementById('edit_city').value = store.city;
    document.getElementById('edit_state').value = store.state;
    document.getElementById('edit_zip').value = store.zip;
    document.getElementById('edit_phone').value = store.phone || '';
    document.getElementById('edit_website_url').value = store.website_url || '';
    document.getElementById('edit_notes').value = store.notes || '';
    document.getElementById('edit_latitude').value = store.latitude || '';
    document.getElementById('edit_longitude').value = store.longitude || '';

    // Populate technique checkboxes
    document.getElementById('edit_supports_casting').checked = store.supports_casting || false;
    document.getElementById('edit_supports_flameworking_hard').checked = store.supports_flameworking_hard || false;
    document.getElementById('edit_supports_flameworking_soft').checked = store.supports_flameworking_soft || false;
    document.getElementById('edit_supports_fusing').checked = store.supports_fusing || false;
    document.getElementById('edit_supports_glass_blowing').checked = store.supports_glass_blowing || false;
    document.getElementById('edit_supports_stained_glass').checked = store.supports_stained_glass || false;
    document.getElementById('edit_supports_other').checked = store.supports_other || false;

    // Show clickable current website URL
    const websiteDisplay = document.getElementById('currentWebsiteDisplay');
    const websiteLink = document.getElementById('currentWebsiteLink');
    const websiteText = document.getElementById('currentWebsiteText');

    if (store.website_url) {
      websiteLink.href = store.website_url;
      websiteText.textContent = store.website_url;
      websiteDisplay.classList.remove('hidden');
    } else {
      websiteDisplay.classList.add('hidden');
    }

    // Show modal
    editModal.classList.remove('hidden');
    editError.classList.add('hidden');
  };

  window.closeEditModal = function() {
    editModal.classList.add('hidden');
    editForm.reset();
    editError.classList.add('hidden');
  };

  // Handle edit form submission
  editForm?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const stableId = document.getElementById('edit_stable_id').value;
    const saveButton = document.getElementById('saveEditButton');

    saveButton.disabled = true;
    saveButton.textContent = 'Saving...';
    editError.classList.add('hidden');

    try {
      const updates = {
        name: document.getElementById('edit_name').value,
        address_line1: document.getElementById('edit_address_line1').value,
        address_line2: document.getElementById('edit_address_line2').value || undefined,
        city: document.getElementById('edit_city').value,
        state: document.getElementById('edit_state').value,
        zip: document.getElementById('edit_zip').value,
        phone: document.getElementById('edit_phone').value || undefined,
        website_url: document.getElementById('edit_website_url').value || undefined,
        notes: document.getElementById('edit_notes').value || undefined,
        latitude: parseFloat(document.getElementById('edit_latitude').value) || undefined,
        longitude: parseFloat(document.getElementById('edit_longitude').value) || undefined,
        supports_casting: document.getElementById('edit_supports_casting').checked,
        supports_flameworking_hard: document.getElementById('edit_supports_flameworking_hard').checked,
        supports_flameworking_soft: document.getElementById('edit_supports_flameworking_soft').checked,
        supports_fusing: document.getElementById('edit_supports_fusing').checked,
        supports_glass_blowing: document.getElementById('edit_supports_glass_blowing').checked,
        supports_stained_glass: document.getElementById('edit_supports_stained_glass').checked,
        supports_other: document.getElementById('edit_supports_other').checked,
      };

      const response = await authenticatedFetch('/api/update-store', {
        method: 'POST',
        body: JSON.stringify({ stable_id: stableId, updates })
      });

      if (response.ok) {
        closeEditModal();
        await loadSubmissions();
      } else {
        const error = await response.json();
        editError.textContent = error.error || 'Failed to update store';
        editError.classList.remove('hidden');
      }
    } catch (error) {
      if (error.message !== 'Unauthorized') {
        editError.textContent = 'Network error. Please try again.';
        editError.classList.remove('hidden');
      }
    } finally {
      saveButton.disabled = false;
      saveButton.textContent = 'Save Changes';
    }
  });

  // Close modal when clicking outside
  editModal?.addEventListener('click', (e) => {
    if (e.target === editModal) {
      closeEditModal();
    }
  });
</script>
</Layout>
